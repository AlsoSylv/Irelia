{
	"components": {
		"schemas": {
			"AVContainer": {
				"enum": [
					"webm",
					"png",
					"pngAndDepth"
				],
				"type": "string"
			},
			"AbilityResource": {
				"description": "Ability Resource",
				"enum": [
					"MANA",
					"ENERGY",
					"NONE",
					"SHIELD",
					"BATTLEFURY",
					"DRAGONFURY",
					"RAGE",
					"HEAT",
					"GNARFURY",
					"FEROCITY",
					"BLOODWELL",
					"WIND",
					"AMMO",
					"MOONLIGHT",
					"OTHER",
					"MAX"
				],
				"type": "string"
			},
			"Banners": {
				"properties": {
					"visible": {
						"description": "True if banners are currently visible.",
						"type": "boolean"
					}
				},
				"type": "object"
			},
			"BindingAsyncCancelEvent": {
				"description": "Represents a cancelled asynchronous operation.",
				"properties": {
					"asyncToken": {
						"description": "Asynchronous operation token",
						"format": "int32",
						"type": "integer"
					}
				},
				"type": "object"
			},
			"BindingAsyncFailureEvent": {
				"description": "Represents a failed asynchronous operation.",
				"properties": {
					"asyncToken": {
						"description": "Asynchronous operation token",
						"format": "int32",
						"type": "integer"
					},
					"error": {
						"description": "Error message",
						"type": "string"
					}
				},
				"type": "object"
			},
			"BindingAsyncState": {
				"description": "Possible states of an asynchronous operation.",
				"enum": [
					"None",
					"Running",
					"Cancelling",
					"Cancelled",
					"Succeeded",
					"Failed"
				],
				"type": "string"
			},
			"BindingCallbackEvent": {
				"description": "Represents the parameters of a call to a provided callback.",
				"properties": {
					"id": {
						"description": "ID of the callback being invoked",
						"format": "int32",
						"type": "integer"
					},
					"parameters": {
						"description": "Callback parameters",
						"items": {
							"additionalProperties": true,
							"type": "object"
						},
						"type": "array"
					}
				},
				"type": "object"
			},
			"BindingFullApiHelp": {
				"description": "Describes the exposed native API.",
				"properties": {
					"events": {
						"items": {
							"$ref": "#/components/schemas/BindingFullEventHelp"
						},
						"type": "array"
					},
					"functions": {
						"items": {
							"$ref": "#/components/schemas/BindingFullFunctionHelp"
						},
						"type": "array"
					},
					"types": {
						"items": {
							"$ref": "#/components/schemas/BindingFullTypeHelp"
						},
						"type": "array"
					}
				},
				"type": "object"
			},
			"BindingFullArgumentHelp": {
				"description": "Describes a function parameter.",
				"properties": {
					"description": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"optional": {
						"type": "boolean"
					},
					"type": {
						"$ref": "#/components/schemas/BindingFullTypeIdentifier"
					}
				},
				"type": "object"
			},
			"BindingFullEnumValueHelp": {
				"description": "Describes an enumerator.",
				"properties": {
					"description": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"value": {
						"format": "int32",
						"type": "integer"
					}
				},
				"type": "object"
			},
			"BindingFullEventHelp": {
				"description": "Describes an event.",
				"properties": {
					"description": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"nameSpace": {
						"type": "string"
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"type": {
						"$ref": "#/components/schemas/BindingFullTypeIdentifier"
					}
				},
				"type": "object"
			},
			"BindingFullFieldHelp": {
				"description": "Describes a member of a struct.",
				"properties": {
					"description": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"offset": {
						"format": "int32",
						"type": "integer"
					},
					"optional": {
						"type": "boolean"
					},
					"type": {
						"$ref": "#/components/schemas/BindingFullTypeIdentifier"
					}
				},
				"type": "object"
			},
			"BindingFullFunctionHelp": {
				"description": "Describes a function.",
				"properties": {
					"arguments": {
						"items": {
							"$ref": "#/components/schemas/BindingFullArgumentHelp"
						},
						"type": "array"
					},
					"async": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"help": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"nameSpace": {
						"type": "string"
					},
					"returns": {
						"$ref": "#/components/schemas/BindingFullTypeIdentifier"
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"threadSafe": {
						"type": "boolean"
					}
				},
				"type": "object"
			},
			"BindingFullTypeHelp": {
				"description": "Describes a struct or enum type.",
				"properties": {
					"description": {
						"type": "string"
					},
					"fields": {
						"items": {
							"$ref": "#/components/schemas/BindingFullFieldHelp"
						},
						"type": "array"
					},
					"name": {
						"type": "string"
					},
					"nameSpace": {
						"type": "string"
					},
					"size": {
						"format": "int32",
						"type": "integer"
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"values": {
						"items": {
							"$ref": "#/components/schemas/BindingFullEnumValueHelp"
						},
						"type": "array"
					}
				},
				"type": "object"
			},
			"BindingFullTypeIdentifier": {
				"description": "Describes the type of a value.",
				"properties": {
					"elementType": {
						"type": "string"
					},
					"type": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"BindingGenericAsyncEvent": {
				"description": "Represents generic data for an asynchronous event.",
				"properties": {
					"asyncToken": {
						"description": "Asynchronous operation token",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"additionalProperties": true,
						"description": "Event data",
						"type": "object"
					}
				},
				"type": "object"
			},
			"BindingGenericEvent": {
				"description": "Represents generic data for an event.",
				"properties": {
					"data": {
						"additionalProperties": true,
						"description": "Event data",
						"type": "object"
					}
				},
				"type": "object"
			},
			"BindingHelpFormat": {
				"description": "Help format for binding functions and types.",
				"enum": [
					"Full",
					"Epytext"
				],
				"type": "string"
			},
			"Color": {
				"description": "Color",
				"properties": {
					"a": {
						"type": "integer"
					},
					"b": {
						"type": "integer"
					},
					"g": {
						"type": "integer"
					},
					"r": {
						"type": "integer"
					}
				},
				"type": "object"
			},
			"ColorValue": {
				"description": "Color",
				"properties": {
					"a": {
						"description": "Alpha channel value (0-255)",
						"format": "float",
						"type": "number"
					},
					"b": {
						"description": "Blue channel value (0-255)",
						"format": "float",
						"type": "number"
					},
					"g": {
						"description": "Green channel value (0-255)",
						"format": "float",
						"type": "number"
					},
					"r": {
						"description": "Red channel value (0-255)",
						"format": "float",
						"type": "number"
					}
				},
				"type": "object"
			},
			"EasingType": {
				"description": "Blending options for interpolating time between keyframes",
				"enum": [
					"linear",
					"snap",
					"smoothStep",
					"smootherStep",
					"quadraticEaseIn",
					"quadraticEaseOut",
					"quadraticEaseInOut",
					"cubicEaseIn",
					"cubicEaseOut",
					"cubicEaseInOut",
					"quarticEaseIn",
					"quarticEaseOut",
					"quarticEaseInOut",
					"quinticEaseIn",
					"quinticEaseOut",
					"quinticEaseInOut",
					"sineEaseIn",
					"sineEaseOut",
					"sineEaseInOut",
					"circularEaseIn",
					"circularEaseOut",
					"circularEaseInOut",
					"exponentialEaseIn",
					"exponentialEaseOut",
					"exponentialEaseInOut",
					"elasticEaseIn",
					"elasticEaseOut",
					"elasticEaseInOut",
					"backEaseIn",
					"backEaseOut",
					"backEaseInOut",
					"bounceEaseIn",
					"bounceEaseOut",
					"bounceEaseInOut"
				],
				"type": "string"
			},
			"Game": {
				"properties": {
					"processID": {
						"description": "Process identifier for this game",
						"format": "int32",
						"type": "integer"
					}
				},
				"type": "object"
			},
			"HudCameraMode": {
				"enum": [
					"top",
					"fps",
					"tps",
					"focus",
					"path"
				],
				"type": "string"
			},
			"KeyFrameAString": {
				"properties": {
					"blend": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/EasingType"
						},
						"description": "Keyframe blending"
					},
					"time": {
						"description": "Game time in seconds of keyframe",
						"format": "float",
						"type": "number"
					},
					"value": {
						"description": "Keyframe value",
						"type": "string"
					}
				},
				"type": "object"
			},
			"KeyFrameBool": {
				"properties": {
					"blend": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/EasingType"
						},
						"description": "Keyframe blending"
					},
					"time": {
						"description": "Game time in seconds of keyframe",
						"format": "float",
						"type": "number"
					},
					"value": {
						"description": "Keyframe value",
						"type": "boolean"
					}
				},
				"type": "object"
			},
			"KeyFrameColor": {
				"properties": {
					"blend": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/EasingType"
						},
						"description": "Keyframe blending"
					},
					"time": {
						"description": "Game time in seconds of keyframe",
						"format": "float",
						"type": "number"
					},
					"value": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/ColorValue"
						},
						"description": "Keyframe value"
					}
				},
				"type": "object"
			},
			"KeyFrameFloat": {
				"properties": {
					"blend": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/EasingType"
						},
						"description": "Keyframe blending"
					},
					"time": {
						"description": "Game time in seconds of keyframe",
						"format": "float",
						"type": "number"
					},
					"value": {
						"description": "Keyframe value",
						"format": "float",
						"type": "number"
					}
				},
				"type": "object"
			},
			"KeyFrameVector3": {
				"properties": {
					"blend": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/EasingType"
						},
						"description": "Keyframe blending"
					},
					"time": {
						"description": "Game time in seconds of keyframe",
						"format": "float",
						"type": "number"
					},
					"value": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/Vector3f"
						},
						"description": "Keyframe value"
					}
				},
				"type": "object"
			},
			"Playback": {
				"properties": {
					"length": {
						"description": "Total length of the replay in seconds",
						"format": "float",
						"type": "number"
					},
					"paused": {
						"description": "True if the replay is paused",
						"type": "boolean"
					},
					"seeking": {
						"description": "True if the replay is fast forwarding or rewinding",
						"type": "boolean"
					},
					"speed": {
						"description": "Replay playback speed (0.5 is half speed, 2.0 is double speed etc)",
						"format": "float",
						"type": "number"
					},
					"time": {
						"description": "Current time of the replay in seconds since the beginning of the game.",
						"format": "float",
						"type": "number"
					}
				},
				"type": "object"
			},
			"Recording": {
				"properties": {
					"codec": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/AVContainer"
						},
						"description": "Indicates the output format of the recording (for example webm or png)"
					},
					"currentTime": {
						"description": "Current time of the recording, indicating progress of the render",
						"format": "float",
						"type": "number"
					},
					"endTime": {
						"description": "Game time in seconds where the recording ends",
						"format": "float",
						"type": "number"
					},
					"enforceFrameRate": {
						"description": "True if the recording should match the target frames per second exactly by slowing down the recording if required",
						"type": "boolean"
					},
					"framesPerSecond": {
						"description": "Target number of frames per second to record in the video",
						"format": "int32",
						"type": "integer"
					},
					"height": {
						"description": "Height of the output video in pixels (same as the game window size)",
						"format": "int32",
						"type": "integer"
					},
					"lossless": {
						"description": "True if the recording is being output in a lossless codec (no compression)",
						"type": "boolean"
					},
					"path": {
						"description": "File path or directory where the recording should be saved",
						"type": "string"
					},
					"recording": {
						"description": "True if we are currently recording a replay",
						"type": "boolean"
					},
					"replaySpeed": {
						"description": "Playback speed used when recording",
						"format": "float",
						"type": "number"
					},
					"startTime": {
						"description": "Game time in seconds where the recording starts",
						"format": "float",
						"type": "number"
					},
					"width": {
						"description": "Width of the output video in pixels (same as the game window size)",
						"format": "int32",
						"type": "integer"
					}
				},
				"type": "object"
			},
			"RemotingHelpFormat": {
				"description": "Help format for remoting functions and types.",
				"enum": [
					"Full",
					"Epytext",
					"Brief",
					"Console"
				],
				"type": "string"
			},
			"RemotingPrivilege": {
				"description": "Well-known privilege levels for bindable functions.",
				"enum": [
					"None",
					"User",
					"Admin",
					"Local"
				],
				"type": "string"
			},
			"RemotingSerializedFormat": {
				"description": "Serialization format for remoting requests and results.",
				"enum": [
					"JSON",
					"YAML",
					"MsgPack"
				],
				"type": "string"
			},
			"Render": {
				"properties": {
					"banners": {
						"description": "Display banners on the map",
						"type": "boolean"
					},
					"cameraAttached": {
						"description": "True if the camera is attached to an object in the game",
						"type": "boolean"
					},
					"cameraLookSpeed": {
						"description": "Mouse look speed of the camera when in FPS mode (higher is faster)",
						"format": "float",
						"type": "number"
					},
					"cameraMode": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/HudCameraMode"
						},
						"description": "Camera movement mode such as first person or third person"
					},
					"cameraMoveSpeed": {
						"description": "Movement speed of the camera (higher is faster)",
						"format": "float",
						"type": "number"
					},
					"cameraPosition": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/Vector3f"
						},
						"description": "Position of the camera in world coordinates"
					},
					"cameraRotation": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/Vector3f"
						},
						"description": "Rotation of the camera in Euler degrees (yaw, pitch, roll)"
					},
					"characters": {
						"description": "Display champions and minions",
						"type": "boolean"
					},
					"depthFogColor": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/ColorValue"
						},
						"description": "Depth fog color specified in RGBA"
					},
					"depthFogEnabled": {
						"description": "Display depth based fog",
						"type": "boolean"
					},
					"depthFogEnd": {
						"description": "Distance from the camera to the end of the fog",
						"format": "float",
						"type": "number"
					},
					"depthFogIntensity": {
						"description": "Depth fog intensity (opacity from 0.0 to 1.0)",
						"format": "float",
						"type": "number"
					},
					"depthFogStart": {
						"description": "Distance from the camera to the start of the fog",
						"format": "float",
						"type": "number"
					},
					"depthOfFieldCircle": {
						"description": "Adjusts the shape and strength of the blur effect",
						"format": "float",
						"type": "number"
					},
					"depthOfFieldDebug": {
						"description": "Render a debug display to visualize depth of field distances",
						"type": "boolean"
					},
					"depthOfFieldEnabled": {
						"description": "Display depth of field post processing",
						"type": "boolean"
					},
					"depthOfFieldFar": {
						"description": "Furthest distance from the camera in full blur",
						"format": "float",
						"type": "number"
					},
					"depthOfFieldMid": {
						"description": "Distance to the center of the depth of field effect, the point that will be the most in focus",
						"format": "float",
						"type": "number"
					},
					"depthOfFieldNear": {
						"description": "Closest distance from the camera in full blur",
						"format": "float",
						"type": "number"
					},
					"depthOfFieldWidth": {
						"description": "Distance around the middle point that should be in focus",
						"format": "float",
						"type": "number"
					},
					"environment": {
						"description": "Display the level environment",
						"type": "boolean"
					},
					"farClip": {
						"description": "Far camera clipping distance",
						"format": "float",
						"type": "number"
					},
					"fieldOfView": {
						"description": "Camera field of view in degrees (default 45)",
						"format": "float",
						"type": "number"
					},
					"floatingText": {
						"description": "Display text notifications over the top of champions",
						"type": "boolean"
					},
					"fogOfWar": {
						"description": "Display fog of war",
						"type": "boolean"
					},
					"healthBarChampions": {
						"description": "Display health bars on champions",
						"type": "boolean"
					},
					"healthBarMinions": {
						"description": "Display health bars on minions",
						"type": "boolean"
					},
					"healthBarPets": {
						"description": "Display health bars on champion pets",
						"type": "boolean"
					},
					"healthBarStructures": {
						"description": "Display health bars on structure and towers",
						"type": "boolean"
					},
					"healthBarWards": {
						"description": "Display health bars on wards",
						"type": "boolean"
					},
					"heightFogColor": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/ColorValue"
						},
						"description": "Height fog color specified in RGBA"
					},
					"heightFogEnabled": {
						"description": "Display height based fog",
						"type": "boolean"
					},
					"heightFogEnd": {
						"description": "Vertical height at the end of the fog",
						"format": "float",
						"type": "number"
					},
					"heightFogIntensity": {
						"description": "Height fog intensity (opacity from 0.0 to 1.0)",
						"format": "float",
						"type": "number"
					},
					"heightFogStart": {
						"description": "Vertical height at the start of the fog",
						"format": "float",
						"type": "number"
					},
					"interfaceAll": {
						"description": "Display all of the user interface",
						"type": "boolean"
					},
					"interfaceAnnounce": {
						"description": "Display game announcements (center of the window)",
						"type": "boolean"
					},
					"interfaceChat": {
						"description": "Display the chat window",
						"type": "boolean"
					},
					"interfaceFrames": {
						"description": "Display the champion frames (sides of the window)",
						"type": "boolean"
					},
					"interfaceKillCallouts": {
						"description": "Display kill callouts",
						"type": "boolean"
					},
					"interfaceMinimap": {
						"description": "Display the game minimap (bottom right corner)",
						"type": "boolean"
					},
					"interfaceNeutralTimers": {
						"description": "Display neutral objective timers",
						"type": "boolean"
					},
					"interfaceQuests": {
						"description": "Display quests",
						"type": "boolean"
					},
					"interfaceReplay": {
						"description": "Display the replay HUD with camera options",
						"type": "boolean"
					},
					"interfaceScore": {
						"description": "Display the replay score interface (top of the window)",
						"type": "boolean"
					},
					"interfaceScoreboard": {
						"description": "Display the replay scoreboard (bottom of the window)",
						"type": "boolean"
					},
					"interfaceTarget": {
						"description": "Display the target selection window",
						"type": "boolean"
					},
					"interfaceTimeline": {
						"description": "Display the replay timeline (bottom of the window)",
						"type": "boolean"
					},
					"navGridOffset": {
						"description": "Adjusts the height that champions and minions walk over the environment",
						"format": "float",
						"type": "number"
					},
					"nearClip": {
						"description": "Near camera clipping distance",
						"format": "float",
						"type": "number"
					},
					"outlineHover": {
						"description": "Display outlines on champions when the mouse is hovered over",
						"type": "boolean"
					},
					"outlineSelect": {
						"description": "Display outlines on champions when selected",
						"type": "boolean"
					},
					"particles": {
						"description": "Display particles",
						"type": "boolean"
					},
					"selectionName": {
						"description": "Sets the selection to the given name, case insensitive",
						"type": "string"
					},
					"selectionOffset": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/Vector3f"
						},
						"description": "Sets the camera location to the selection's location adding the given offset"
					},
					"skyboxOffset": {
						"description": "Y-Axis offset of the skybox from the camera position",
						"format": "float",
						"type": "number"
					},
					"skyboxPath": {
						"description": "Filepath for a cube mapped skybox in DDS format",
						"type": "string"
					},
					"skyboxRadius": {
						"description": "Radius from the camera position to the edge of the skybox",
						"format": "float",
						"type": "number"
					},
					"skyboxRotation": {
						"description": "Y-Axis rotation of the skybox in degrees",
						"format": "float",
						"type": "number"
					},
					"sunDirection": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/Vector3f"
						},
						"description": "Vector indicating the direction of the sun for shadows"
					}
				},
				"type": "object"
			},
			"Sequence": {
				"properties": {
					"cameraPosition": {
						"description": "Keyframe track for Render.cameraPosition",
						"items": {
							"$ref": "#/components/schemas/KeyFrameVector3"
						},
						"type": "array"
					},
					"cameraRotation": {
						"description": "Keyframe track for Render.cameraRotation",
						"items": {
							"$ref": "#/components/schemas/KeyFrameVector3"
						},
						"type": "array"
					},
					"depthFogColor": {
						"description": "Keyframe track for Render.depthFogColor",
						"items": {
							"$ref": "#/components/schemas/KeyFrameColor"
						},
						"type": "array"
					},
					"depthFogEnabled": {
						"description": "Keyframe track for Render.depthFogEnabled",
						"items": {
							"$ref": "#/components/schemas/KeyFrameBool"
						},
						"type": "array"
					},
					"depthFogEnd": {
						"description": "Keyframe track for Render.depthFogEnd",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"depthFogIntensity": {
						"description": "Keyframe track for Render.depthFogIntensity",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"depthFogStart": {
						"description": "Keyframe track for Render.depthFogStart",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"depthOfFieldCircle": {
						"description": "Keyframe track for Render.depthOfFieldCircle",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"depthOfFieldEnabled": {
						"description": "Keyframe track for Render.depthOfFieldEnabled",
						"items": {
							"$ref": "#/components/schemas/KeyFrameBool"
						},
						"type": "array"
					},
					"depthOfFieldFar": {
						"description": "Keyframe track for Render.depthOfFieldFar",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"depthOfFieldMid": {
						"description": "Keyframe track for Render.depthOfFieldMid",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"depthOfFieldNear": {
						"description": "Keyframe track for Render.depthOfFieldNear",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"depthOfFieldWidth": {
						"description": "Keyframe track for Render.depthOfFieldWidth",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"farClip": {
						"description": "Keyframe track for Render.farClip",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"fieldOfView": {
						"description": "Keyframe track for Render.fieldOfView",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"heightFogColor": {
						"description": "Keyframe track for Render.heightFogColor",
						"items": {
							"$ref": "#/components/schemas/KeyFrameColor"
						},
						"type": "array"
					},
					"heightFogEnabled": {
						"description": "Keyframe track for Render.heightFogEnabled",
						"items": {
							"$ref": "#/components/schemas/KeyFrameBool"
						},
						"type": "array"
					},
					"heightFogEnd": {
						"description": "Keyframe track for Render.heightFogEnd",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"heightFogIntensity": {
						"description": "Keyframe track for Render.heightFogIntensity",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"heightFogStart": {
						"description": "Keyframe track for Render.heightFogStart",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"navGridOffset": {
						"description": "Keyframe track for Render.navGridOffset",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"nearClip": {
						"description": "Keyframe track for Render.nearClip",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"playbackSpeed": {
						"description": "Keyframe track for Playback.speed",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"selectionName": {
						"description": "Keyframe track for Render.selectionName",
						"items": {
							"$ref": "#/components/schemas/KeyFrameAString"
						},
						"type": "array"
					},
					"selectionOffset": {
						"description": "Keyframe track for Render.selectionOffset",
						"items": {
							"$ref": "#/components/schemas/KeyFrameVector3"
						},
						"type": "array"
					},
					"skyboxOffset": {
						"description": "Keyframe track for Render.skyboxOffset",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"skyboxRadius": {
						"description": "Keyframe track for Render.skyboxRadius",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"skyboxRotation": {
						"description": "Keyframe track for Render.skyboxRotation",
						"items": {
							"$ref": "#/components/schemas/KeyFrameFloat"
						},
						"type": "array"
					},
					"sunDirection": {
						"description": "Keyframe track for Render.sunDirection",
						"items": {
							"$ref": "#/components/schemas/KeyFrameVector3"
						},
						"type": "array"
					}
				},
				"type": "object"
			},
			"TeamID": {
				"description": "Team identification",
				"enum": [
					"ALL",
					"UNKNOWN",
					"ORDER",
					"CHAOS",
					"NEUTRAL"
				],
				"type": "string"
			},
			"Vector2f": {
				"description": "2D vector",
				"properties": {
					"x": {
						"format": "float",
						"type": "number"
					},
					"y": {
						"format": "float",
						"type": "number"
					}
				},
				"type": "object"
			},
			"Vector3f": {
				"description": "3D vector",
				"properties": {
					"x": {
						"format": "float",
						"type": "number"
					},
					"y": {
						"format": "float",
						"type": "number"
					},
					"z": {
						"format": "float",
						"type": "number"
					}
				},
				"type": "object"
			},
			"Vector4f": {
				"description": "4D vector",
				"properties": {
					"w": {
						"format": "float",
						"type": "number"
					},
					"x": {
						"format": "float",
						"type": "number"
					},
					"y": {
						"format": "float",
						"type": "number"
					},
					"z": {
						"format": "float",
						"type": "number"
					}
				},
				"type": "object"
			}
		}
	},
	"info": {
		"description": "League of Legends Game Client",
		"title": "LoLClient",
		"version": "1.0.0"
	},
	"openapi": "3.0.0",
	"paths": {
		"/AsyncDelete": {
			"post": {
				"operationId": "AsyncDelete",
				"parameters": [
					{
						"description": "ID of the asynchronous operation to remove",
						"in": "query",
						"name": "asyncToken",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Cancels the asynchronous operation or removes its completion status.",
				"tags": [
					"builtin"
				]
			}
		},
		"/AsyncResult": {
			"post": {
				"operationId": "AsyncResult",
				"parameters": [
					{
						"description": "ID of the asynchronous operation to check",
						"in": "query",
						"name": "asyncToken",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Retrieves the result of a completed asynchronous operation.",
				"tags": [
					"builtin"
				]
			}
		},
		"/AsyncStatus": {
			"post": {
				"operationId": "AsyncStatus",
				"parameters": [
					{
						"description": "ID of the asynchronous operation to check",
						"in": "query",
						"name": "asyncToken",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Retrieves details on the current state of an asynchronous operation.",
				"tags": [
					"builtin"
				]
			}
		},
		"/Cancel": {
			"post": {
				"operationId": "Cancel",
				"parameters": [
					{
						"description": "Operation to cancel",
						"in": "query",
						"name": "asyncToken",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Attempts to cancel an asynchronous operation",
				"tags": [
					"builtin"
				]
			}
		},
		"/Exit": {
			"post": {
				"operationId": "Exit",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Closes the connection.",
				"tags": [
					"builtin"
				]
			}
		},
		"/Help": {
			"post": {
				"description": "With no arguments, returns a list of all available functions and types along with a short description. If a function or type is specified, returns detailed information about it.",
				"operationId": "Help",
				"parameters": [
					{
						"description": "Name of the function or type to describe",
						"in": "query",
						"name": "target",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Format for returned information",
						"schema": {
							"enum": [
								"Full",
								"Epytext",
								"Brief",
								"Console"
							],
							"type": "string"
						},
						"in": "query",
						"name": "format",
						"required": false
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Returns information on available functions and types",
				"tags": [
					"builtin"
				]
			}
		},
		"/Subscribe": {
			"post": {
				"operationId": "Subscribe",
				"parameters": [
					{
						"description": "Name of the event to subscribe to",
						"in": "query",
						"name": "eventName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Desired format to receive events in. If unspecified, events will be sent in the active result format at the time.",

						"in": "query",
						"name": "format",
						"required": false,
						"schema": {
							"enum": [
								"JSON",
								"YAML",
								"MsgPack"
							],
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Subscribes to a given event",
				"tags": [
					"builtin"
				]
			}
		},
		"/Unsubscribe": {
			"post": {
				"operationId": "Unsubscribe",
				"parameters": [
					{
						"description": "Name of the event to unsubscribe from",
						"in": "query",
						"name": "eventName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Unsubscribes from a given event",
				"tags": [
					"builtin"
				]
			}
		},
		"/async/v1/result/{asyncToken}": {
			"get": {
				"operationId": "HttpAsyncResult",
				"parameters": [
					{
						"description": "ID of the asynchronous operation to check",
						"in": "path",
						"name": "asyncToken",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Retrieves the result of a completed asynchronous operation.",
				"tags": [
					"builtin"
				]
			}
		},
		"/async/v1/status/{asyncToken}": {
			"delete": {
				"operationId": "HttpAsyncDelete",
				"parameters": [
					{
						"description": "ID of the asynchronous operation to remove",
						"in": "path",
						"name": "asyncToken",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Cancels the asynchronous operation or removes its completion status.",
				"tags": [
					"builtin"
				]
			},
			"get": {
				"operationId": "HttpAsyncStatus",
				"parameters": [
					{
						"description": "ID of the asynchronous operation to check",
						"in": "path",
						"name": "asyncToken",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Retrieves details on the current state of an asynchronous operation.",
				"tags": [
					"builtin"
				]
			}
		},
		"/liveclientdata/activeplayer": {
			"get": {
				"operationId": "GetLiveclientdataActiveplayer",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Get all data about the active player",
				"tags": [
					"champions",
					"activePlayer"
				]
			}
		},
		"/liveclientdata/activeplayerabilities": {
			"get": {
				"operationId": "GetLiveclientdataActiveplayerabilities",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Get Abilities for the active player",
				"tags": [
					"champions",
					"abilities",
					"activePlayer"
				]
			}
		},
		"/liveclientdata/activeplayername": {
			"get": {
				"operationId": "GetLiveclientdataActiveplayername",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Returns the player name",
				"tags": [
					"activePlayer"
				]
			}
		},
		"/liveclientdata/activeplayerrunes": {
			"get": {
				"operationId": "GetLiveclientdataActiveplayerrunes",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Retrieve the full list of runes for the active player",
				"tags": [
					"runes",
					"activePlayer"
				]
			}
		},
		"/liveclientdata/allgamedata": {
			"get": {
				"operationId": "GetLiveclientdataAllgamedata",
				"parameters": [
					{
						"description": "ID of the next event you expect to see",
						"in": "query",
						"name": "eventID",
						"required": false,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Get all available data",
				"tags": [
					"all"
				]
			}
		},
		"/liveclientdata/eventdata": {
			"get": {
				"operationId": "GetLiveclientdataEventdata",
				"parameters": [
					{
						"description": "ID of the next event you expect to see",
						"in": "query",
						"name": "eventID",
						"required": false,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Get a list of events that have occurred in the game",
				"tags": [
					"champions",
					"events"
				]
			}
		},
		"/liveclientdata/gamestats": {
			"get": {
				"operationId": "GetLiveclientdataGamestats",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Basic data about the game",
				"tags": [
					"game"
				]
			}
		},
		"/liveclientdata/playeritems": {
			"get": {
				"operationId": "GetLiveclientdataPlayeritems",
				"parameters": [
					{
						"description": "Summoner name of player",
						"in": "query",
						"name": "summonerName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Retrieve the list of items for the player",
				"tags": [
					"items",
					"allPlayers"
				]
			}
		},
		"/liveclientdata/playerlist": {
			"get": {
				"operationId": "GetLiveclientdataPlayerlist",
				"parameters": [
					{
						"description": "Heroes team ID. Optional, returns all players on all teams if null. ",
						"in": "query",
						"name": "teamID",
						"required": false,
						"schema": {
							"enum": [
								"ALL",
								"UNKNOWN",
								"ORDER",
								"CHAOS",
								"NEUTRAL"
							],
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Retrieve the list of heroes in the game and their stats",
				"tags": [
					"champions",
					"units",
					"allPlayers"
				]
			}
		},
		"/liveclientdata/playermainrunes": {
			"get": {
				"operationId": "GetLiveclientdataPlayermainrunes",
				"parameters": [
					{
						"description": "Summoner name of player",
						"in": "query",
						"name": "summonerName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Retrieve the basic runes of any player",
				"tags": [
					"allPlayers",
					"runes"
				]
			}
		},
		"/liveclientdata/playerscores": {
			"get": {
				"operationId": "GetLiveclientdataPlayerscores",
				"parameters": [
					{
						"description": "Summoner name of player",
						"in": "query",
						"name": "summonerName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Retrieve the list of the current scores for the player",
				"tags": [
					"allPlayers",
					"scores"
				]
			}
		},
		"/liveclientdata/playersummonerspells": {
			"get": {
				"operationId": "GetLiveclientdataPlayersummonerspells",
				"parameters": [
					{
						"description": "Summoner name of player",
						"in": "query",
						"name": "summonerName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Retrieve the list of the summoner spells for the player",
				"tags": [
					"allPlayers"
				]
			}
		},
		"/replay/banners": {
			"get": {
				"description": "Information about Esports Banners",
				"operationId": "GetReplayBanners",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Banners"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Returns information about the current state of Esports Banners (DEPRECATED)",
				"tags": [
					"replay"
				]
			},
			"put": {
				"description": "Allows modifying the settings for Esport Banners",
				"operationId": "PutReplayBanners",
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Banners"
							}
						}
					}
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Banners"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Sets Esport Banner configuration (DEPRECATED)",
				"tags": [
					"replay"
				]
			}
		},
		"/replay/game": {
			"get": {
				"description": "Information about the game client process.",
				"operationId": "GetReplayGame",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Game"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Information about the game client process.",
				"tags": [
					"replay"
				]
			}
		},
		"/replay/particles": {
			"get": {
				"description": "Information about particile visibility.",
				"operationId": "GetReplayParticles",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Returns map of particle name to current visibility status.",
				"tags": [
					"replay"
				]
			},
			"post": {
				"description": "Allows modifying the currently visible particles.",
				"operationId": "PostReplayParticles",
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": true,
								"type": "object"
							}
						}
					}
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Takes a map of particle name to visibility and applies it to the currently rendering particles.",
				"tags": [
					"replay"
				]
			}
		},
		"/replay/playback": {
			"get": {
				"description": "Returns the current replay playback state such as pause and current time.",
				"operationId": "GetReplayPlayback",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Playback"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Returns the current replay playback state such as pause and current time.",
				"tags": [
					"replay"
				]
			},
			"post": {
				"description": "Allows modifying the playback state such as play / pause and the game time to seek to. All values are optional.",
				"operationId": "PostReplayPlayback",
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Playback"
							}
						}
					}
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Playback"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Allows modifying the playback state such as play / pause and the game time to seek to. All values are optional.",
				"tags": [
					"replay"
				]
			}
		},
		"/replay/recording": {
			"get": {
				"description": "Returns the current status of video recording. Poll this resource for progress on the output.",
				"operationId": "GetReplayRecording",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Recording"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Returns the current status of video recording. Poll this resource for progress on the output.",
				"tags": [
					"replay"
				]
			},
			"post": {
				"description": "Post to begin a recording specifying the codec and output filepath. Subsequent GET requests to this resource will update the status.",
				"operationId": "PostReplayRecording",
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Recording"
							}
						}
					}
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Recording"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Post to begin a recording specifying the codec and output filepath. Subsequent GET requests to this resource will update the status.",
				"tags": [
					"replay"
				]
			}
		},
		"/replay/render": {
			"get": {
				"description": "Returns the current render properties.",
				"operationId": "GetReplayRender",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Render"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Returns the current render properties.",
				"tags": [
					"replay"
				]
			},
			"post": {
				"description": "Allows modifying the current render properties. All values are optional.",
				"operationId": "PostReplayRender",
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Render"
							}
						}
					}
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Render"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Allows modifying the current render properties. All values are optional.",
				"tags": [
					"replay"
				]
			}
		},
		"/replay/sequence": {
			"get": {
				"description": "Returns the sequence currently being applied.",
				"operationId": "GetReplaySequence",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Sequence"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Returns the sequence currently being applied.",
				"tags": [
					"replay"
				]
			},
			"post": {
				"description": "Post to apply a sequence of keyframes that the replay should play. Post an empty object to remove the sequence.",
				"operationId": "PostReplaySequence",
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Sequence"
							}
						}
					}
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Sequence"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Post to apply a sequence of keyframes that the replay should play. Post an empty object to remove the sequence.",
				"tags": [
					"replay"
				]
			}
		},
		"/swagger/v1/api-docs": {
			"get": {
				"operationId": "HttpApiDocsV1",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Retrieves the API documentation resource listing",
				"tags": [
					"builtin"
				]
			}
		},
		"/swagger/v1/api-docs/{api}": {
			"get": {
				"operationId": "HttpApiDeclarationV1",
				"parameters": [
					{
						"description": "API to get a declaration for",
						"in": "path",
						"name": "api",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Retrieves the API declaration for a supported API",
				"tags": [
					"builtin"
				]
			}
		},
		"/swagger/v2/swagger.json": {
			"get": {
				"operationId": "HttpApiDocsV2",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Retrieves the API documentation",
				"tags": [
					"builtin"
				]
			}
		},
		"/swagger/v3/openapi.json": {
			"get": {
				"operationId": "HttpApiDocsV3",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"additionalProperties": true,
									"type": "object"
								}
							}
						},
						"description": "Successful response"
					}
				},
				"summary": "Retrieves the API documentation",
				"tags": [
					"builtin"
				]
			}
		}
	}
}